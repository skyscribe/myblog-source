---
layout: post
title: "lazy evaluation in Ruby&amp;Haskell"
date: 2012-03-06 20:47
comments: true
categories: [ruby, haskell, functional]
---

lazy evaluation 是函数式编程中的一个重要概念，和传统过程式语言中的cache/state变量恰恰相对；其对应的数值/运算仅仅在用到的时候才实际运算，如果没有调用就什么也不会做。对于构造起来比较昂贵的对象，lazy evaluation可以有效避免cache带来的额外开销，因为只要需要的部分运算被执行，不用的则根本什么也不做。这里以获取Fibonacci数列中的第N个数为例，采用无穷序列的办法比较两种语言的实现。

<!--more-->

## Haskell 版本

haskell版本的实现如下：
{% include_code fib.hs fib.hs %}

这里的**fib**函数返回一个无穷序列，每一项是一个fibo数。`getIt`函数用于返回第_N_个数。`fetch`是一个wrapper函数，最后的main函数获取第10000个数作为测试。编译运行如下：
``` bash
ghc -o fib fib.hs
time ./fib


real    0m0.051s
user    0m0.020s
sys 0m0.004s

```

## ruby版本

作为一个非纯函数式语言，缺少pattern matching的支持，ruby版本需要借助lambda技巧来实现无穷序列。类似的版本如下：
{% include_code lazy_fib.rb lazy_fib.rb %}

实现部分扩展了Enumerable，使之接受一个lambda作为构造参数，通过lambda来达到延迟调用的目的（也就是所谓的**lazy**).在其`each`函数中，先获取第一个元素，然后剩下的部分重新赋值给`@tree`.

运行结果如下：

``` bash
time ruby lazy_fib.rb 


real    0m0.251s
user    0m0.132s
sys 0m0.016s

```
## 结果比较

两种语言都有GC开销，Ruby版本的实现要比Haskell版本慢了不少，可能的开销主要在于：
- lambda 构造开销
- Dynamic loading的开销，因为Haskell程序是静态编译的

## 参考链接
- Haskell 例子 来自 [haskell wiki](http://www.haskell.org/haskellwiki/Haskell/Lazy_evaluation)
- Ruby 例子 [closures in ruby](http://innig.net/software/ruby/closures-in-ruby)
